import numpy as np
import cv2
import pytesseract
from flask import Flask, request, jsonify, render_template
from PIL import Image
import os

app = Flask(__name__)
UPLOAD_FOLDER = "static/uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á Tesseract OCR (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files/Tesseract-OCR/tesseract.exe'

def apply_gamma_correction(image, gamma=1.5):
    """ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Gamma Correction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û """
    inv_gamma = 1.0 / gamma
    gamma_table = np.array([(i / 255.0) ** inv_gamma * 255 for i in range(256)], dtype=np.uint8)
    return cv2.LUT(image, gamma_table)

def enhance_contrast(image):
    """ ‡πÄ‡∏û‡∏¥‡πà‡∏° Contrast ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ CLAHE (Contrast Limited Adaptive Histogram Equalization) """
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    return clahe.apply(image)

@app.route('/')
def home():
    return render_template("index.html", image_url="/static/uploads/latest.jpg")

@app.route('/upload', methods=['POST'])
def upload():
    try:
        # üìå ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û Grayscale ‡∏à‡∏≤‡∏Å ESP32
        image_data = request.data
        if not image_data:
            return jsonify({"error": "No image data received"}), 400

        width, height = 640, 480  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà ESP32-CAM ‡∏™‡πà‡∏á‡∏°‡∏≤
        img_array = np.frombuffer(image_data, dtype=np.uint8).reshape((height, width))

        # üé® ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö OCR
        img_corrected = apply_gamma_correction(img_array, gamma=1.5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
        img_enhanced = enhance_contrast(img_corrected)

        # üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô JPEG
        image_path = os.path.join(UPLOAD_FOLDER, "latest.jpg")
        Image.fromarray(img_enhanced, mode="L").save(image_path, "JPEG")

        print("‚úÖ ‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        license_plate_text = detect_license_plate(img_enhanced)
        print("‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ:", license_plate_text)

        return jsonify({"message": "Complete", "license_plate": license_plate_text}), 200

    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return jsonify({"error": f"Failed to process image: {str(e)}"}), 500

def detect_license_plate(image):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û Grayscale ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Canny ‡πÅ‡∏•‡∏∞ Tesseract """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏°‡∏µ 1 channel (Grayscale)
        if len(image.shape) == 2:  # ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û grayscale ‡πÅ‡∏•‡πâ‡∏ß
            gray = image
        else:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # üîπ ‡∏•‡∏î noise ‡∏î‡πâ‡∏ß‡∏¢ bilateral filter
        gray = cv2.bilateralFilter(gray, 11, 17, 17)

        # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Canny
        edged = cv2.Canny(gray, 30, 200)

        # üîπ ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏ö
        contours, _ = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        contours = sorted(contours, key=cv2.contourArea, reverse=True)[:10]
        license_plate_contour = None

        # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        for c in contours:
            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.018 * peri, True)
            if len(approx) == 4:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
                license_plate_contour = approx
                break

        if license_plate_contour is None:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"

        # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        mask = np.zeros(gray.shape, np.uint8)
        cv2.drawContours(mask, [license_plate_contour], 0, 255, -1)
        new_image = cv2.bitwise_and(image, image, mask=mask)
        image_path = os.path.join(UPLOAD_FOLDER, "detect.jpg")
        Image.fromarray(new_image, mode="L").save(image_path, "JPEG")

        (x, y) = np.where(mask == 255)
        (topx, topy) = (np.min(x), np.min(y))
        (bottomx, bottomy) = (np.max(x), np.max(y))
        cropped = gray[topx:bottomx+1, topy:bottomy+1]

        # üîπ OCR ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        custom_config = r'--oem 3 --psm 6'  # psm 6 = ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô
        text = pytesseract.image_to_string(cropped, lang='tha', config=custom_config)

        print("üöó ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ:", text.strip())
        return text.strip()

    except Exception as e:
        print(f"‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)